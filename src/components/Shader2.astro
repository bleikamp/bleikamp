<style>
  .shader2-canvas {
    @apply w-full h-full;
    background-color: #000;
  }
</style>

<canvas id="webgl-canvas-2" class="shader2-canvas cursor-none"></canvas>

<script>
  const canvas2 = document.getElementById("webgl-canvas-2");
  const gl2 = canvas2.getContext("webgl");

  function resizeCanvas2() {
    canvas2.width = window.innerWidth * 0.3;
    canvas2.height = window.innerWidth * 0.3;
    gl2.viewport(0, 0, gl2.drawingBufferWidth, gl2.drawingBufferHeight);
  }

  window.addEventListener("resize", () => {
    resizeCanvas2();
  });

  resizeCanvas2();

  function createShader2(gl, type, source) {
    const shader = gl.createShader(type);
    gl.shaderSource(shader, source);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
      console.error("Shader2 compile failed:", gl.getShaderInfoLog(shader));
      gl.deleteShader(shader);
      return null;
    }
    return shader;
  }

  function createProgram2(gl, vertexSource, fragmentSource) {
    const vShader = createShader2(gl, gl.VERTEX_SHADER, vertexSource);
    const fShader = createShader2(gl, gl.FRAGMENT_SHADER, fragmentSource);

    const program = gl.createProgram();
    gl.attachShader(program, vShader);
    gl.attachShader(program, fShader);
    gl.linkProgram(program);

    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
      console.error("Program2 link failed:", gl.getProgramInfoLog(program));
      gl.deleteProgram(program);
      return null;
    }

    return program;
  }

  const vertexSource2 = `
    attribute vec2 a_position;
    void main() {
        gl_Position = vec4(a_position, 0.0, 1.0);
    }
  `;

  const fragmentSource2 = `
    precision mediump float;
    uniform vec2 u_resolution;
    uniform float u_time;
    uniform vec2 u_mouse;
    uniform vec2 u_mouseVelocity;

    float random(vec2 st) {
        return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);
    }

    float noise(vec2 st) {
        vec2 i = floor(st);
        vec2 f = fract(st);
        float a = random(i);
        float b = random(i + vec2(1.0, 0.0));
        float c = random(i + vec2(0.0, 1.0));
        float d = random(i + vec2(1.0, 1.0));
        vec2 u = f * f * (3.0 - 2.0 * f);
        return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
    }

    vec3 getGradient(vec2 uv) {
        vec3 pink = vec3(1.0, 0.2, 0.5);
        vec3 orange = vec3(1.0, 0.5, 0.2);
        
        float n = noise(uv * 3.0 + u_time * 0.1);
        n += noise(uv * 6.0 - u_time * 0.05) * 0.5;
        n = n / 1.5;
        
        return mix(pink, orange, n);
    }

    float getCircle(vec2 uv, float radius, float blur) {
        float d = length(uv);
        float innerEdge = radius - blur;
        float outerEdge = radius + blur;
        return 1.0 - smoothstep(innerEdge, outerEdge, d);
    }

    float getBlurAmount(vec2 pos, vec2 mouse, vec2 velocity) {
        vec2 dist = abs(pos - mouse);
        float maxBlur = 2.5;
        float minBlur = 0.01;
        float falloffDistance = 0.2;
        
        // Calculate base blur
        float xBlur = mix(maxBlur, minBlur, smoothstep(0.0, falloffDistance, dist.x));
        float yBlur = mix(maxBlur, minBlur, smoothstep(0.0, falloffDistance, dist.y));
        float baseBlur = max(xBlur, yBlur);
        
        // Add spring effect using velocity
        float springStrength = 0.5;
        float velocityMagnitude = length(velocity);
        float springEffect = velocityMagnitude * springStrength;
        
        // Combine base blur with spring effect
        return baseBlur + springEffect;
    }

    vec2 createGrid(vec2 st) {
        const float GRID_SIZE = 8.0;
        vec2 gridSt = st * GRID_SIZE;
        vec2 cell = fract(gridSt) * 2.0 - 1.0;
        return cell;
    }

    void main() {
        vec2 uv = gl_FragCoord.xy/u_resolution.xy;
        vec2 st = uv * 2.0 - 1.0;
        st.x *= u_resolution.x/u_resolution.y;

        // Get normalized mouse position
        vec2 mouse = u_mouse;
        mouse = mouse * 2.0 - 1.0;
        mouse.x *= u_resolution.x/u_resolution.y;

        // Create grid of spheres
        vec2 gridSt = createGrid(uv);
        
        // Calculate blur based on column position
        float columnBlur = getBlurAmount(st, mouse, u_mouseVelocity);
        
        // Get circle with dynamic blur
        float circle = getCircle(gridSt, 0.3, columnBlur);
        
        // Get gradient colors
        vec3 gradientColor = getGradient(gridSt + vec2(u_time * 0.1));
        
        // Apply circle mask with gradient
        vec3 finalColor = gradientColor * circle;
        
        gl_FragColor = vec4(finalColor, circle);
    }
  `;

  const program2 = createProgram2(gl2, vertexSource2, fragmentSource2);

  // Create and bind position buffer
  const positionBuffer2 = gl2.createBuffer();
  gl2.bindBuffer(gl2.ARRAY_BUFFER, positionBuffer2);
  const positions2 = new Float32Array([
    -1, -1,  // bottom left
     1, -1,  // bottom right
    -1,  1,  // top left
    -1,  1,  // top left
     1, -1,  // bottom right
     1,  1,  // top right
  ]);
  gl2.bufferData(gl2.ARRAY_BUFFER, positions2, gl2.STATIC_DRAW);

  // Get attribute and uniform locations
  const aPositionLocation2 = gl2.getAttribLocation(program2, "a_position");
  const uResolutionLocation2 = gl2.getUniformLocation(program2, "u_resolution");
  const uTimeLocation2 = gl2.getUniformLocation(program2, "u_time");
  const uMouseLocation2 = gl2.getUniformLocation(program2, "u_mouse");

  let mouseX2 = 0.5;
  let mouseY2 = 0.5;
  let mouseXVel2 = 0;
  let mouseYVel2 = 0;
  let lastMouseX2 = 0.5;
  let lastMouseY2 = 0.5;
  let velocityDecay2 = 0.95;

  canvas2.addEventListener("mousemove", (e) => {
    const rect = canvas2.getBoundingClientRect();
    const newMouseX = (e.clientX - rect.left) / rect.width;
    const newMouseY = 1.0 - (e.clientY - rect.top) / rect.height;

    mouseXVel2 = (newMouseX - lastMouseX2) * 2.0;
    mouseYVel2 = (newMouseY - lastMouseY2) * 2.0;

    lastMouseX2 = mouseX2;
    lastMouseY2 = mouseY2;
    mouseX2 = Math.max(0, Math.min(1, newMouseX));
    mouseY2 = Math.max(0, Math.min(1, newMouseY));
  });

  canvas2.addEventListener("mouseleave", () => {
    mouseX2 = 0.5;
    mouseY2 = 0.5;
  });

  // Set up attribute
  gl2.useProgram(program2);
  gl2.enableVertexAttribArray(aPositionLocation2);
  gl2.vertexAttribPointer(aPositionLocation2, 2, gl2.FLOAT, false, 0, 0);

  let startTime2 = performance.now();
  function render2() {
    const now = performance.now();
    const time = (now - startTime2) * 0.001;

    // Apply velocity decay
    mouseXVel2 *= velocityDecay2;
    mouseYVel2 *= velocityDecay2;

    gl2.uniform2f(
      uResolutionLocation2,
      gl2.drawingBufferWidth,
      gl2.drawingBufferHeight
    );
    gl2.uniform1f(uTimeLocation2, time);
    gl2.uniform2f(uMouseLocation2, mouseX2, mouseY2);
    gl2.uniform2f(uMouseVelocityLocation2, mouseXVel2, mouseYVel2);

    gl2.clearColor(0.0, 0.0, 0.0, 1.0);
    gl2.clear(gl2.COLOR_BUFFER_BIT);

    gl2.drawArrays(gl2.TRIANGLES, 0, 6);

    requestAnimationFrame(render2);
  }

  const uMouseVelocityLocation2 = gl2.getUniformLocation(program2, "u_mouseVelocity");

  render2();
</script>
